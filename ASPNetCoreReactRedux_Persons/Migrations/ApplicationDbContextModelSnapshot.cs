// <auto-generated />
using System;
using ASPNetCoreReactRedux_Persons.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ASPNetCoreReactRedux_Persons.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ASPNetCoreReactRedux_Persons.Entity.CategoriaContato", b =>
                {
                    b.Property<int>("CategoriaContatoId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoriaContatoId");

                    b.ToTable("CategoriaContatos");

                    b.HasData(
                        new
                        {
                            CategoriaContatoId = 0,
                            Descricao = "Nenhum"
                        },
                        new
                        {
                            CategoriaContatoId = 1,
                            Descricao = "Desconhecido"
                        },
                        new
                        {
                            CategoriaContatoId = 3,
                            Descricao = "Residencia"
                        },
                        new
                        {
                            CategoriaContatoId = 2,
                            Descricao = "Comercio"
                        });
                });

            modelBuilder.Entity("ASPNetCoreReactRedux_Persons.Entity.Cidade", b =>
                {
                    b.Property<long>("CidadeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EstadoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(155)")
                        .HasMaxLength(155);

                    b.HasKey("CidadeId");

                    b.HasIndex("EstadoId");

                    b.ToTable("Cidades");

                    b.HasData(
                        new
                        {
                            CidadeId = 1L,
                            EstadoId = "SP",
                            Nome = "São José do Rio Preto"
                        },
                        new
                        {
                            CidadeId = 2L,
                            EstadoId = "SP",
                            Nome = "Mirassol"
                        },
                        new
                        {
                            CidadeId = 3L,
                            EstadoId = "SP",
                            Nome = "Bady Bassit"
                        },
                        new
                        {
                            CidadeId = 4L,
                            EstadoId = "SP",
                            Nome = "Cosmorama"
                        },
                        new
                        {
                            CidadeId = 5L,
                            EstadoId = "SP",
                            Nome = "Cedral"
                        },
                        new
                        {
                            CidadeId = 6L,
                            EstadoId = "SP",
                            Nome = "Ipigua"
                        },
                        new
                        {
                            CidadeId = 7L,
                            EstadoId = "SP",
                            Nome = "Barretos"
                        },
                        new
                        {
                            CidadeId = 8L,
                            EstadoId = "SP",
                            Nome = "Uchoa"
                        },
                        new
                        {
                            CidadeId = 9L,
                            EstadoId = "RJ",
                            Nome = "Rio de Janeiro"
                        },
                        new
                        {
                            CidadeId = 10L,
                            EstadoId = "PR",
                            Nome = "Curitiba"
                        },
                        new
                        {
                            CidadeId = 11L,
                            EstadoId = "SC",
                            Nome = "Florianópolis"
                        },
                        new
                        {
                            CidadeId = 12L,
                            EstadoId = "SC",
                            Nome = "Itajaí"
                        },
                        new
                        {
                            CidadeId = 13L,
                            EstadoId = "SC",
                            Nome = "Brusque"
                        });
                });

            modelBuilder.Entity("ASPNetCoreReactRedux_Persons.Entity.Contato", b =>
                {
                    b.Property<long>("ContatoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoriaContatoId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoContatoId")
                        .HasColumnType("int");

                    b.HasKey("ContatoId");

                    b.HasIndex("CategoriaContatoId");

                    b.HasIndex("TipoContatoId");

                    b.ToTable("Contatos");
                });

            modelBuilder.Entity("ASPNetCoreReactRedux_Persons.Entity.Documento", b =>
                {
                    b.Property<long>("DocumentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NumeroDocumento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PessoaId")
                        .HasColumnType("bigint");

                    b.Property<int>("TipoDocumentoId")
                        .HasColumnType("int");

                    b.HasKey("DocumentoId");

                    b.HasIndex("PessoaId");

                    b.HasIndex("TipoDocumentoId");

                    b.ToTable("Documentos");
                });

            modelBuilder.Entity("ASPNetCoreReactRedux_Persons.Entity.Endereco", b =>
                {
                    b.Property<long>("EnderecoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bairro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CEP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CidadeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Complemento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numero")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<int>("TipoEnderecoId")
                        .HasColumnType("int");

                    b.HasKey("EnderecoId");

                    b.HasIndex("CidadeId");

                    b.HasIndex("TipoEnderecoId");

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("ASPNetCoreReactRedux_Persons.Entity.Estado", b =>
                {
                    b.Property<string>("UF")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UF");

                    b.ToTable("Estados");

                    b.HasData(
                        new
                        {
                            UF = "AC",
                            Nome = "Acre"
                        },
                        new
                        {
                            UF = "AL",
                            Nome = "Alagoas"
                        },
                        new
                        {
                            UF = "AP",
                            Nome = "Amapá"
                        },
                        new
                        {
                            UF = "AM",
                            Nome = "Amazonas"
                        },
                        new
                        {
                            UF = "BA",
                            Nome = "Bahia"
                        },
                        new
                        {
                            UF = "CE",
                            Nome = "Ceará"
                        },
                        new
                        {
                            UF = "DF",
                            Nome = "Distrito Federal"
                        },
                        new
                        {
                            UF = "ES",
                            Nome = "Espírito Santo"
                        },
                        new
                        {
                            UF = "GO",
                            Nome = "Goiás"
                        },
                        new
                        {
                            UF = "MA",
                            Nome = "Maranhão"
                        },
                        new
                        {
                            UF = "MT",
                            Nome = "Mato Grosso"
                        },
                        new
                        {
                            UF = "MS",
                            Nome = "Mato Grosso do Sul"
                        },
                        new
                        {
                            UF = "MG",
                            Nome = "Minas Gerais"
                        },
                        new
                        {
                            UF = "PA",
                            Nome = "Pará"
                        },
                        new
                        {
                            UF = "PB",
                            Nome = "Paraíba"
                        },
                        new
                        {
                            UF = "PR",
                            Nome = "Paraná"
                        },
                        new
                        {
                            UF = "PE",
                            Nome = "Pernambuco"
                        },
                        new
                        {
                            UF = "PI",
                            Nome = "Piauí"
                        },
                        new
                        {
                            UF = "RJ",
                            Nome = "Rio de Janeiro"
                        },
                        new
                        {
                            UF = "RN",
                            Nome = "Rio Grande do Norte"
                        },
                        new
                        {
                            UF = "RS",
                            Nome = "Rio Grande do Sul"
                        },
                        new
                        {
                            UF = "RO",
                            Nome = "Rondônia"
                        },
                        new
                        {
                            UF = "RR",
                            Nome = "Roraima"
                        },
                        new
                        {
                            UF = "SC",
                            Nome = "Santa Catarina"
                        },
                        new
                        {
                            UF = "SP",
                            Nome = "São Paulo"
                        },
                        new
                        {
                            UF = "SE",
                            Nome = "Sergipe"
                        },
                        new
                        {
                            UF = "TO",
                            Nome = "Tocantins"
                        });
                });

            modelBuilder.Entity("ASPNetCoreReactRedux_Persons.Entity.Idioma", b =>
                {
                    b.Property<int>("IdiomaId")
                        .HasColumnType("int");

                    b.Property<string>("LinguaIdioma")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdiomaId");

                    b.ToTable("Idiomas");

                    b.HasData(
                        new
                        {
                            IdiomaId = 0,
                            LinguaIdioma = "Nenhum"
                        },
                        new
                        {
                            IdiomaId = 1,
                            LinguaIdioma = "Desconhecido"
                        },
                        new
                        {
                            IdiomaId = 2,
                            LinguaIdioma = "Portugues"
                        },
                        new
                        {
                            IdiomaId = 3,
                            LinguaIdioma = "Ingles"
                        },
                        new
                        {
                            IdiomaId = 4,
                            LinguaIdioma = "Frances"
                        },
                        new
                        {
                            IdiomaId = 5,
                            LinguaIdioma = "Chines"
                        },
                        new
                        {
                            IdiomaId = 6,
                            LinguaIdioma = "Russo"
                        },
                        new
                        {
                            IdiomaId = 7,
                            LinguaIdioma = "Japones"
                        });
                });

            modelBuilder.Entity("ASPNetCoreReactRedux_Persons.Entity.Pessoa", b =>
                {
                    b.Property<long>("PessoaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<long>("CelularId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataInclusao")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Date")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataObito")
                        .HasColumnType("datetime2");

                    b.Property<long>("EmailId")
                        .HasColumnType("bigint");

                    b.Property<long>("EnderecoId")
                        .HasColumnType("bigint");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pseudonimo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Sexo")
                        .HasColumnType("bit");

                    b.Property<string>("SobreNome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PessoaId");

                    b.HasIndex("CelularId");

                    b.HasIndex("EmailId");

                    b.HasIndex("EnderecoId");

                    b.ToTable("Pessoas");
                });

            modelBuilder.Entity("ASPNetCoreReactRedux_Persons.Entity.PessoaIdioma", b =>
                {
                    b.Property<long>("PessoaId")
                        .HasColumnType("bigint");

                    b.Property<int>("IdiomaId")
                        .HasColumnType("int");

                    b.HasKey("PessoaId", "IdiomaId");

                    b.HasIndex("IdiomaId");

                    b.ToTable("PessoaIdioma");
                });

            modelBuilder.Entity("ASPNetCoreReactRedux_Persons.Entity.Relacionamento", b =>
                {
                    b.Property<long>("PessoaPropriaId")
                        .HasColumnType("bigint");

                    b.Property<long>("PessoaRelacionadaId")
                        .HasColumnType("bigint");

                    b.Property<int>("TipoRelacionamentoId")
                        .HasColumnType("int");

                    b.HasKey("PessoaPropriaId", "PessoaRelacionadaId");

                    b.HasIndex("PessoaRelacionadaId");

                    b.HasIndex("TipoRelacionamentoId");

                    b.ToTable("Relacionamentos");
                });

            modelBuilder.Entity("ASPNetCoreReactRedux_Persons.Entity.TipoContato", b =>
                {
                    b.Property<int>("TipoContatoId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TipoContatoId");

                    b.ToTable("TipoContatos");

                    b.HasData(
                        new
                        {
                            TipoContatoId = 0,
                            Descricao = "Nenhum"
                        },
                        new
                        {
                            TipoContatoId = 1,
                            Descricao = "Desconhecido"
                        },
                        new
                        {
                            TipoContatoId = 2,
                            Descricao = "Celular"
                        },
                        new
                        {
                            TipoContatoId = 3,
                            Descricao = "E-Mail"
                        },
                        new
                        {
                            TipoContatoId = 4,
                            Descricao = "Rede Social"
                        },
                        new
                        {
                            TipoContatoId = 5,
                            Descricao = "Telefone"
                        });
                });

            modelBuilder.Entity("ASPNetCoreReactRedux_Persons.Entity.TipoDocumento", b =>
                {
                    b.Property<int>("TipoDocumentoId")
                        .HasColumnType("int");

                    b.Property<string>("Documento")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TipoDocumentoId");

                    b.ToTable("TipoDocumento");

                    b.HasData(
                        new
                        {
                            TipoDocumentoId = 0,
                            Documento = "Nenhum"
                        },
                        new
                        {
                            TipoDocumentoId = 1,
                            Documento = "Desconhecido"
                        },
                        new
                        {
                            TipoDocumentoId = 2,
                            Documento = "CPF"
                        },
                        new
                        {
                            TipoDocumentoId = 3,
                            Documento = "RG"
                        },
                        new
                        {
                            TipoDocumentoId = 4,
                            Documento = "RNE"
                        });
                });

            modelBuilder.Entity("ASPNetCoreReactRedux_Persons.Entity.TipoEndereco", b =>
                {
                    b.Property<int>("TipoEnderecoId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TipoEnderecoId");

                    b.ToTable("TipoEnderecos");

                    b.HasData(
                        new
                        {
                            TipoEnderecoId = 0,
                            Descricao = "Nenhum"
                        },
                        new
                        {
                            TipoEnderecoId = 1,
                            Descricao = "Desconhecido"
                        },
                        new
                        {
                            TipoEnderecoId = 2,
                            Descricao = "Casa"
                        },
                        new
                        {
                            TipoEnderecoId = 3,
                            Descricao = "Apartamento"
                        },
                        new
                        {
                            TipoEnderecoId = 4,
                            Descricao = "Industria"
                        },
                        new
                        {
                            TipoEnderecoId = 5,
                            Descricao = "Rural"
                        });
                });

            modelBuilder.Entity("ASPNetCoreReactRedux_Persons.Entity.TipoRelacionamento", b =>
                {
                    b.Property<int>("TipoRelacionamentoId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TipoRelacionamentoId");

                    b.ToTable("TipoRelacionamentos");

                    b.HasData(
                        new
                        {
                            TipoRelacionamentoId = 0,
                            Descricao = "Nenhum"
                        },
                        new
                        {
                            TipoRelacionamentoId = 1,
                            Descricao = "Desconhecido"
                        },
                        new
                        {
                            TipoRelacionamentoId = 2,
                            Descricao = "Familiar"
                        },
                        new
                        {
                            TipoRelacionamentoId = 3,
                            Descricao = "Amoroso"
                        },
                        new
                        {
                            TipoRelacionamentoId = 4,
                            Descricao = "Amizade"
                        },
                        new
                        {
                            TipoRelacionamentoId = 5,
                            Descricao = "Profissional"
                        });
                });

            modelBuilder.Entity("ASPNetCoreReactRedux_Persons.Entity.Cidade", b =>
                {
                    b.HasOne("ASPNetCoreReactRedux_Persons.Entity.Estado", "Estado")
                        .WithMany("Cidades")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASPNetCoreReactRedux_Persons.Entity.Contato", b =>
                {
                    b.HasOne("ASPNetCoreReactRedux_Persons.Entity.CategoriaContato", "CategoriaContato")
                        .WithMany("Contatos")
                        .HasForeignKey("CategoriaContatoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPNetCoreReactRedux_Persons.Entity.TipoContato", "TipoContato")
                        .WithMany()
                        .HasForeignKey("TipoContatoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASPNetCoreReactRedux_Persons.Entity.Documento", b =>
                {
                    b.HasOne("ASPNetCoreReactRedux_Persons.Entity.Pessoa", "Pessoa")
                        .WithMany("Documentos")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPNetCoreReactRedux_Persons.Entity.TipoDocumento", "TipoDocumento")
                        .WithMany()
                        .HasForeignKey("TipoDocumentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASPNetCoreReactRedux_Persons.Entity.Endereco", b =>
                {
                    b.HasOne("ASPNetCoreReactRedux_Persons.Entity.Cidade", "Cidade")
                        .WithMany("Enderecos")
                        .HasForeignKey("CidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPNetCoreReactRedux_Persons.Entity.TipoEndereco", "TipoEndereco")
                        .WithMany()
                        .HasForeignKey("TipoEnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASPNetCoreReactRedux_Persons.Entity.Pessoa", b =>
                {
                    b.HasOne("ASPNetCoreReactRedux_Persons.Entity.Contato", "Celular")
                        .WithMany()
                        .HasForeignKey("CelularId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPNetCoreReactRedux_Persons.Entity.Contato", "Email")
                        .WithMany()
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ASPNetCoreReactRedux_Persons.Entity.Endereco", "Endereco")
                        .WithMany()
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASPNetCoreReactRedux_Persons.Entity.PessoaIdioma", b =>
                {
                    b.HasOne("ASPNetCoreReactRedux_Persons.Entity.Idioma", "Idioma")
                        .WithMany("Pessoas")
                        .HasForeignKey("IdiomaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPNetCoreReactRedux_Persons.Entity.Pessoa", "Pessoa")
                        .WithMany("Idiomas")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASPNetCoreReactRedux_Persons.Entity.Relacionamento", b =>
                {
                    b.HasOne("ASPNetCoreReactRedux_Persons.Entity.Pessoa", "Pessoa")
                        .WithMany("Relacionamentos")
                        .HasForeignKey("PessoaPropriaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ASPNetCoreReactRedux_Persons.Entity.Pessoa", "Relacionado")
                        .WithMany()
                        .HasForeignKey("PessoaRelacionadaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPNetCoreReactRedux_Persons.Entity.TipoRelacionamento", "TipoRelacionamento")
                        .WithMany()
                        .HasForeignKey("TipoRelacionamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
